// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: main.proto

package mainpb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AddRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddRequestMultiError, or
// nil if none found.
func (m *AddRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetA() <= 0 {
		err := AddRequestValidationError{
			field:  "A",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetB() <= 0 {
		err := AddRequestValidationError{
			field:  "B",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddRequestMultiError(errors)
	}

	return nil
}

// AddRequestMultiError is an error wrapping multiple validation errors
// returned by AddRequest.ValidateAll() if the designated constraints aren't met.
type AddRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddRequestMultiError) AllErrors() []error { return m }

// AddRequestValidationError is the validation error returned by
// AddRequest.Validate if the designated constraints aren't met.
type AddRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddRequestValidationError) ErrorName() string { return "AddRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddRequestValidationError{}

// Validate checks the field values on AddResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddResponseMultiError, or
// nil if none found.
func (m *AddResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Sum

	if len(errors) > 0 {
		return AddResponseMultiError(errors)
	}

	return nil
}

// AddResponseMultiError is an error wrapping multiple validation errors
// returned by AddResponse.ValidateAll() if the designated constraints aren't met.
type AddResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddResponseMultiError) AllErrors() []error { return m }

// AddResponseValidationError is the validation error returned by
// AddResponse.Validate if the designated constraints aren't met.
type AddResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddResponseValidationError) ErrorName() string { return "AddResponseValidationError" }

// Error satisfies the builtin error interface
func (e AddResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddResponseValidationError{}

// Validate checks the field values on FibonacciRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FibonacciRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FibonacciRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FibonacciRequestMultiError, or nil if none found.
func (m *FibonacciRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FibonacciRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetN(); val < 1 || val > 50 {
		err := FibonacciRequestValidationError{
			field:  "N",
			reason: "value must be inside range [1, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FibonacciRequestMultiError(errors)
	}

	return nil
}

// FibonacciRequestMultiError is an error wrapping multiple validation errors
// returned by FibonacciRequest.ValidateAll() if the designated constraints
// aren't met.
type FibonacciRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FibonacciRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FibonacciRequestMultiError) AllErrors() []error { return m }

// FibonacciRequestValidationError is the validation error returned by
// FibonacciRequest.Validate if the designated constraints aren't met.
type FibonacciRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FibonacciRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FibonacciRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FibonacciRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FibonacciRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FibonacciRequestValidationError) ErrorName() string { return "FibonacciRequestValidationError" }

// Error satisfies the builtin error interface
func (e FibonacciRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFibonacciRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FibonacciRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FibonacciRequestValidationError{}

// Validate checks the field values on FibonacciResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FibonacciResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FibonacciResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FibonacciResponseMultiError, or nil if none found.
func (m *FibonacciResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FibonacciResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Number

	if len(errors) > 0 {
		return FibonacciResponseMultiError(errors)
	}

	return nil
}

// FibonacciResponseMultiError is an error wrapping multiple validation errors
// returned by FibonacciResponse.ValidateAll() if the designated constraints
// aren't met.
type FibonacciResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FibonacciResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FibonacciResponseMultiError) AllErrors() []error { return m }

// FibonacciResponseValidationError is the validation error returned by
// FibonacciResponse.Validate if the designated constraints aren't met.
type FibonacciResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FibonacciResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FibonacciResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FibonacciResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FibonacciResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FibonacciResponseValidationError) ErrorName() string {
	return "FibonacciResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FibonacciResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFibonacciResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FibonacciResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FibonacciResponseValidationError{}

// Validate checks the field values on NumberRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NumberRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NumberRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NumberRequestMultiError, or
// nil if none found.
func (m *NumberRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *NumberRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetNumber() <= 0 {
		err := NumberRequestValidationError{
			field:  "Number",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return NumberRequestMultiError(errors)
	}

	return nil
}

// NumberRequestMultiError is an error wrapping multiple validation errors
// returned by NumberRequest.ValidateAll() if the designated constraints
// aren't met.
type NumberRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NumberRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NumberRequestMultiError) AllErrors() []error { return m }

// NumberRequestValidationError is the validation error returned by
// NumberRequest.Validate if the designated constraints aren't met.
type NumberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NumberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NumberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NumberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NumberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NumberRequestValidationError) ErrorName() string { return "NumberRequestValidationError" }

// Error satisfies the builtin error interface
func (e NumberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNumberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NumberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NumberRequestValidationError{}

// Validate checks the field values on NumberResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NumberResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NumberResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NumberResponseMultiError,
// or nil if none found.
func (m *NumberResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *NumberResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Sum

	if len(errors) > 0 {
		return NumberResponseMultiError(errors)
	}

	return nil
}

// NumberResponseMultiError is an error wrapping multiple validation errors
// returned by NumberResponse.ValidateAll() if the designated constraints
// aren't met.
type NumberResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NumberResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NumberResponseMultiError) AllErrors() []error { return m }

// NumberResponseValidationError is the validation error returned by
// NumberResponse.Validate if the designated constraints aren't met.
type NumberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NumberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NumberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NumberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NumberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NumberResponseValidationError) ErrorName() string { return "NumberResponseValidationError" }

// Error satisfies the builtin error interface
func (e NumberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNumberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NumberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NumberResponseValidationError{}

// Validate checks the field values on ChatMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChatMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ChatMessageMultiError, or
// nil if none found.
func (m *ChatMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetMessage()) < 1 {
		err := ChatMessageValidationError{
			field:  "Message",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ChatMessageMultiError(errors)
	}

	return nil
}

// ChatMessageMultiError is an error wrapping multiple validation errors
// returned by ChatMessage.ValidateAll() if the designated constraints aren't met.
type ChatMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatMessageMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatMessageMultiError) AllErrors() []error { return m }

// ChatMessageValidationError is the validation error returned by
// ChatMessage.Validate if the designated constraints aren't met.
type ChatMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatMessageValidationError) ErrorName() string { return "ChatMessageValidationError" }

// Error satisfies the builtin error interface
func (e ChatMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatMessageValidationError{}
